This file describes how the DBI-Link machinery works.

1.  Intro
2.  dbi_link schema
3.  Functions
4.  VIEWs
5.  "shadow tables"

1. Introduction

DBI-Link, as implied by the name, uses the Perl module DBI to link to foreign
data sources, of which there are many, and treat them as PostgreSQL tables.

To do this, you create once per database an underlying dbi_link schema
described below with an initialization script, dbi_link.sql, which contains a
table and some functions.  For each foreign data source, you must call an
initialization function called make_accessor_functions, described below, which
creates a separate schema for each foreign data source.

This initialization creates the following entities for each table.

* a rowtype
* a set-returning function which returns that rowtype
* a VIEW, which has
   - SELECT from the above SRF
   - RULEs for INSERT, UPDATE and DELETE that write to...
* a "shadow table," which has...
* a TRIGGER, which does write operations on the foreign tables.

INSERT, UPDATE and DELETE operations on the foreign tables work via a somewhat
complicated system.  On each VIEW corresponding to a table, there are INSERT,
UPDATE and DELETE RULEs which write to a "shadow table."  Each "shadow table,"
in turn, has a BEFORE INSERT trigger which does the INSERT, UPDATE or DELETE
on the foreign table, but does not write to the "shadow table" itself.  Kudos
to Andrew of Supernews for coming up with this concept.

Each "shadow table" corresponds to a foreign table, and has 2n+1 columns in it,
where n is the number of columns in the foreign table.  These columns
correspond to the action to be taken on the foreign table, which is one of
INSERT, UPDATE and DELETE, a set of columns corresponding to the OLD values in
the table (all NULL for INSERTs), and a set of columns corresponding to the
NEW values in the table (all NULL for DELETEs)


2. dbi_link schema

This table holds connection information.

                                     Table "dbi_link.dbi_connection"
     Column     |  Type   |                                  Modifiers                                   
----------------+---------+------------------------------------------------------------------------------
 data_source_id | integer | not null default nextval('dbi_link.dbi_connection_data_source_id_seq'::text)
 data_source    | text    | not null
 user_name      | text    | 
 auth           | text    | 
 dbh_attr       | text    | 
 remote_schema  | text    | 
 remote_catalog | text    | 
 local_schema   | text    | 
Indexes:
    "dbi_connection_pkey" PRIMARY KEY, btree (data_source_id)
    "dbi_connection_data_source_key" UNIQUE, btree (data_source, user_name)

The schema also contains several functions:
                                        List of functions
  Schema  |          Name           | Result data type |           Argument data types            
----------+-------------------------+------------------+------------------------------------------
 dbi_link | available_drivers       | setof text       | 
 dbi_link | data_sources            | setof text       | text
 dbi_link | make_accessor_functions | boolean          | text, text, text, text, text, text, text
 dbi_link | remote_select           | setof record     | integer, text
 dbi_link | remote_select           | setof record     | text, text, text, text, text
 dbi_link | shadow_trigger_func     | "trigger"        | 
(6 rows)

* available_drivers
     thin wrapper around the DBI function of the same name.
* data_sources
    thin wrapper around the DBI function of the same name.
* make_accessor_functions
    setup script which takes input parameters described in USAGE.txt and sets up a
    new schema for foreign data sources, details of which are described below.
* remote_select
    two versions of this, one with a fully qualified paramaters to make a
    database handle in DBI, the other with a data_source_id.  Each ends with a
    piece of SQL as its last parameter.
* shadow_trigger_func
    the meat of the write operations on foreign data sources.
